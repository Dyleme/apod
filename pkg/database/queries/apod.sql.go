// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: apod.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const addPendingImage = `-- name: AddPendingImage :exec
INSERT INTO apods 
(date)
VALUES ($1)
`

func (q *Queries) AddPendingImage(ctx context.Context, db DBTX, date time.Time) error {
	_, err := db.ExecContext(ctx, addPendingImage, date)
	return err
}

const fetchAllImagePaths = `-- name: FetchAllImagePaths :many
SELECT image_path
FROM apods
WHERE image_path IS NOT NULL
`

func (q *Queries) FetchAllImagePaths(ctx context.Context, db DBTX) ([]sql.NullString, error) {
	rows, err := db.QueryContext(ctx, fetchAllImagePaths)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var image_path sql.NullString
		if err := rows.Scan(&image_path); err != nil {
			return nil, err
		}
		items = append(items, image_path)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchImagePath = `-- name: FetchImagePath :one
SELECT image_path
FROM apods
WHERE date = $1
`

func (q *Queries) FetchImagePath(ctx context.Context, db DBTX, date time.Time) (sql.NullString, error) {
	row := db.QueryRowContext(ctx, fetchImagePath, date)
	var image_path sql.NullString
	err := row.Scan(&image_path)
	return image_path, err
}

const setImagePath = `-- name: SetImagePath :exec
UPDATE apods
SET image_path = $2
WHERE date = $1
`

type SetImagePathParams struct {
	Date      time.Time
	ImagePath sql.NullString
}

func (q *Queries) SetImagePath(ctx context.Context, db DBTX, arg SetImagePathParams) error {
	_, err := db.ExecContext(ctx, setImagePath, arg.Date, arg.ImagePath)
	return err
}
